# -*- coding: utf-8 -*-
"""AID3ITA_M11_3122500024_Muhamad

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xSu3cU4oewHU5DxRZuIxbjrkp2jpNX6Q
"""

import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler, MinMaxScaler

dataset = pd.read_csv('sample_data/milk_training.csv')
train_data = np.array(dataset)[:, 0:-1]
train_label = np.array(dataset)[:, -1]

scaler = MinMaxScaler()
train_data_scaled = scaler.fit_transform(train_data)

gauss = GaussianNB()
gauss.fit(train_data_scaled, train_label)

dataset2 = pd.read_csv('sample_data/milk_testing.csv')
test_data = np.array(dataset2)[:, 0:-1]
test_label = np.array(dataset2)[:, -1]


test_data_scaled = scaler.transform(test_data)

predicted_labels = gauss.predict(test_data_scaled)

accuracy = accuracy_score(predicted_labels, test_label)
print("Accuracy:", accuracy)

import pandas as pd
import numpy as np
from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

class NaiveBayesClassifier:
    def __init__(self, classifier_type='Gaussian',train_dataset= '',test_dataset= '', normalize=False):
        self.classifier_type = classifier_type
        self.normalize = normalize
        self.classifier = self._get_classifier()
        self.scaler = MinMaxScaler()
        self.train_dataset = pd.read_csv(train_dataset)
        self.test_dataset = pd.read_csv(test_dataset)
        self.train_data = np.array(self.train_dataset)[:, 0:-1]
        self.train_label = np.array(self.train_dataset)[:, -1]
        self.test_data = np.array(self.test_dataset)[:,0:-1]
        self.test_label = np.array(self.test_dataset)[:, -1]
        self.predicted_label = None

    def _get_classifier(self):
        if self.classifier_type.lower() == 'gaussian':
            return GaussianNB()
        elif self.classifier_type.lower() == 'multinomial':
            return MultinomialNB()
        elif self.classifier_type.lower() == 'bernoulli':
            return BernoulliNB()
        else:
            raise ValueError("Pilih Diantara INI :D: 'Gaussian', 'Multinomial', 'Bernoulli'.")

    def fit(self):
        if self.normalize:
            self.train_data = self.scaler.fit_transform(self.train_data)
        self.classifier.fit(self.train_data, self.train_label)

    def predict(self):
        if self.normalize:
            self.test_data = self.scaler.transform(self.test_data)
        self.predicted_label = self.classifier.predict(self.test_data)
        return self.predicted_label

    def get_accuracy(self):
        self.accuracy = accuracy_score(self.predicted_label,self.test_label)
        print(f'{self.classifier_type} \t: Normalize? = {self.normalize} \t=>', self.accuracy)
        return self.accuracy

def main():

    classifier1 = NaiveBayesClassifier(classifier_type='Gaussian',train_dataset='sample_data/milk_training.csv',test_dataset='sample_data/milk_testing.csv', normalize=False)
    classifier1.fit()
    classifier1.predict()
    classifier1.get_accuracy()

    classifier2 = NaiveBayesClassifier(classifier_type='Multinomial',train_dataset='sample_data/milk_training.csv',test_dataset='sample_data/milk_testing.csv', normalize=False)
    classifier2.fit()
    classifier2.predict()
    classifier2.get_accuracy()

    classifier3 = NaiveBayesClassifier(classifier_type='Bernoulli',train_dataset='sample_data/milk_training.csv',test_dataset='sample_data/milk_testing.csv', normalize=False)
    classifier3.fit()
    classifier3.predict()
    classifier3.get_accuracy()

    print('')

    classifier4 = NaiveBayesClassifier(classifier_type='Gaussian',train_dataset='sample_data/milk_training.csv',test_dataset='sample_data/milk_testing.csv', normalize=True)
    classifier4.fit()
    classifier4.predict()
    classifier4.get_accuracy()

    classifier5 = NaiveBayesClassifier(classifier_type='Multinomial',train_dataset='sample_data/milk_training.csv',test_dataset='sample_data/milk_testing.csv', normalize=True)
    classifier5.fit()
    classifier5.predict()
    classifier5.get_accuracy()

    classifier6 = NaiveBayesClassifier(classifier_type='Bernoulli',train_dataset='sample_data/milk_training.csv',test_dataset='sample_data/milk_testing.csv', normalize=True)
    classifier6.fit()
    classifier6.predict()
    classifier6.get_accuracy()


if __name__ == "__main__":
    main()